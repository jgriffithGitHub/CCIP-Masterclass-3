{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "ccipRouterAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "cometAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "swapTestnetUsdcAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "ErrorCase",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "router",
						"type": "address"
					}
				],
				"name": "InvalidRouter",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					}
				],
				"name": "MessageNotFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OnlySelf",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "SenderNotAllowed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "sourceChainSelector",
						"type": "uint64"
					}
				],
				"name": "SourceChainNotAllowed",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "reason",
						"type": "bytes"
					}
				],
				"name": "MessageFailed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					}
				],
				"name": "MessageRecovered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_allowed",
						"type": "bool"
					}
				],
				"name": "allowlistSender",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "_sourceChainSelector",
						"type": "uint64"
					},
					{
						"internalType": "bool",
						"name": "_allowed",
						"type": "bool"
					}
				],
				"name": "allowlistSourceChain",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "allowlistedSenders",
				"outputs": [
					{
						"internalType": "bool",
						"name": "isAllowlisted",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "chainSelecotor",
						"type": "uint64"
					}
				],
				"name": "allowlistedSourceChains",
				"outputs": [
					{
						"internalType": "bool",
						"name": "isAllowlisted",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "messageId",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "sourceChainSelector",
								"type": "uint64"
							},
							{
								"internalType": "bytes",
								"name": "sender",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct Client.EVMTokenAmount[]",
								"name": "destTokenAmounts",
								"type": "tuple[]"
							}
						],
						"internalType": "struct Client.Any2EVMMessage",
						"name": "any2EvmMessage",
						"type": "tuple"
					}
				],
				"name": "ccipReceive",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getFailedMessagesIds",
				"outputs": [
					{
						"internalType": "bytes32[]",
						"name": "ids",
						"type": "bytes32[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRouter",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "messageId",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "sourceChainSelector",
								"type": "uint64"
							},
							{
								"internalType": "bytes",
								"name": "sender",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct Client.EVMTokenAmount[]",
								"name": "destTokenAmounts",
								"type": "tuple[]"
							}
						],
						"internalType": "struct Client.Any2EVMMessage",
						"name": "any2EvmMessage",
						"type": "tuple"
					}
				],
				"name": "processMessage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "tokenReceiver",
						"type": "address"
					}
				],
				"name": "retryFailedMessage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					}
				],
				"name": "s_messageContents",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					},
					{
						"internalType": "uint64",
						"name": "sourceChainSelector",
						"type": "uint64"
					},
					{
						"internalType": "bytes",
						"name": "sender",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "simRevert",
						"type": "bool"
					}
				],
				"name": "setSimRevert",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"allowlistSender(address,bool)": {
					"details": "Updates the allowlist status of a sender for transactions.",
					"params": {
						"_allowed": "The allowlist status to be set for the sender.",
						"_sender": "The address of the sender to be updated."
					}
				},
				"allowlistSourceChain(uint64,bool)": {
					"details": "Updates the allowlist status of a source chain",
					"params": {
						"_allowed": "The allowlist status to be set for the source chain.",
						"_sourceChainSelector": "The selector of the source chain to be updated."
					}
				},
				"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
					"details": "Extremely important to ensure only router calls this.",
					"params": {
						"any2EvmMessage": "The message to process."
					}
				},
				"getFailedMessagesIds()": {
					"details": "Iterates over the `s_failedMessages` map, collecting all keys.",
					"returns": {
						"ids": "An array of bytes32 containing the IDs of failed messages from the `s_failedMessages` map."
					}
				},
				"getRouter()": {
					"returns": {
						"_0": "CCIP router address"
					}
				},
				"processMessage((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
					"details": "Transfers specified token amounts to the owner of this contract. This function must be external because of the  try/catch for error handling. It uses the `onlySelf`: can only be called from the contract.",
					"params": {
						"any2EvmMessage": "Received CCIP message."
					}
				},
				"retryFailedMessage(bytes32,address)": {
					"details": "This function is only callable by the contract owner. It changes the status of the message from 'failed' to 'resolved' to prevent reentry and multiple retries of the same message.",
					"params": {
						"messageId": "The unique identifier of the failed message.",
						"tokenReceiver": "The address to which the tokens will be sent."
					}
				},
				"setSimRevert(bool)": {
					"details": "This function is only callable by the contract owner.",
					"params": {
						"simRevert": "If `true`, simulates a revert condition; if `false`, disables the simulation."
					}
				},
				"supportsInterface(bytes4)": {
					"details": "Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.",
					"params": {
						"interfaceId": "The interfaceId to check"
					},
					"returns": {
						"_0": "true if the interfaceId is supported"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"acceptOwnership()": {
					"notice": "Allows an ownership transfer to be completed by the recipient."
				},
				"allowlistSender(address,bool)": {
					"notice": "This function can only be called by the owner."
				},
				"allowlistSourceChain(uint64,bool)": {
					"notice": "This function can only be called by the owner."
				},
				"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
					"notice": "The entrypoint for the CCIP router to call. This function should never revert, all errors should be handled internally in this contract."
				},
				"getFailedMessagesIds()": {
					"notice": "Retrieves the IDs of failed messages from the `s_failedMessages` map."
				},
				"getRouter()": {
					"notice": "Return the current router"
				},
				"owner()": {
					"notice": "Get the current owner"
				},
				"processMessage((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
					"notice": "Serves as the entry point for this contract to process incoming messages."
				},
				"retryFailedMessage(bytes32,address)": {
					"notice": "Allows the owner to retry a failed message in order to unblock the associated tokens."
				},
				"setSimRevert(bool)": {
					"notice": "Allows the owner to toggle simulation of reversion for testing purposes."
				},
				"supportsInterface(bytes4)": {
					"notice": "IERC165 supports an interfaceId"
				},
				"transferOwnership(address)": {
					"notice": "Allows an owner to begin transferring ownership to a new address."
				}
			},
			"notice": "THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY. THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE. DO NOT USE THIS CODE IN PRODUCTION.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Day3Homework/CrossChainReceiver.sol": "CrossChainReceiver"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol": {
			"keccak256": "0x23827b8b1cd9f1d7886720ab0347d34891c4a584dc9ee048b85a41dc2241917f",
			"license": "MIT",
			"urls": [
				"bzz-raw://36de1af7a5a8bee82e009e11d82ae908cc49369e470e2fd09e0f3dc1636daa99",
				"dweb:/ipfs/QmQigXBWez6ZxxMAXB9sjQ86wEnTnB1hmbMcm9wrpcmDK9"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol": {
			"keccak256": "0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48",
			"license": "MIT",
			"urls": [
				"bzz-raw://e3bb4ca50612b0150a29b9ea7c82f6228914ff54716584541bad5c0259e8fa33",
				"dweb:/ipfs/QmTnqhNtBD9bUmqVaR4YHkWrBUdSGHV3DXAgrTM193PGkH"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol": {
			"keccak256": "0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679",
			"license": "MIT",
			"urls": [
				"bzz-raw://14395fefc8310c9a355262359c8f51036f83c004982fb600164c2a007629f81e",
				"dweb:/ipfs/QmeCLr8a5bDVyLQm8v947ULgV4CZmUeQPjVyWixzieBD5o"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/shared/access/ConfirmedOwner.sol": {
			"keccak256": "0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861",
			"license": "MIT",
			"urls": [
				"bzz-raw://f914a1b638300e82d8f5a020a4195235599afebab4ef1e10c6992f3c90e7df3e",
				"dweb:/ipfs/Qmf2MbuVB16qbCGii3U5cjcBvVjAHHYzKp9voJa2eDch9B"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol": {
			"keccak256": "0x927e505bb87a58ea04d1a9efe945f4bf4093e88b618b6fede3b9c68e1e63d989",
			"license": "MIT",
			"urls": [
				"bzz-raw://40f41d2c6eb2e11b9952350013d2fd57ec44c01f60fc33855bdb8d84ad352008",
				"dweb:/ipfs/Qmbi7J7LZzvy8imXMfYpRMiKtr9ewcAHfeE4s3zLm11QY4"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol": {
			"keccak256": "0x895af02d6a3df2930bbb6ec1f2d68118b492ca6e710ba0c34fcb6b574a0906aa",
			"license": "MIT",
			"urls": [
				"bzz-raw://c4c69fab5eea1c0448f856a51d7e5736454fe5cc083d36c60bf3ee23bb3d0e8e",
				"dweb:/ipfs/QmP4fYQ9k7xeZms6cwnqnQuuAkRkeE2TWewyvCD8Mrc2DZ"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/shared/interfaces/IOwnable.sol": {
			"keccak256": "0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767",
			"license": "MIT",
			"urls": [
				"bzz-raw://17c636625a5d29a140612db496d2cca9fb4b48c673adb0fd7b3957d287e75921",
				"dweb:/ipfs/QmNoBX8TY424bdQWyQC7y3kpKfgxyWxhLw7KEhhEEoBN9q"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol": {
			"keccak256": "0xf7a52b7d3a7b79117544d6bbeb8564bd22c760c4937d69914b99641a957a8f2a",
			"license": "MIT",
			"urls": [
				"bzz-raw://2b5afd167693d0e80d30d0f50b718b5df237c97d721383b97154049cabab1128",
				"dweb:/ipfs/QmZpVB96pJpaJmmnqB1RC3qSZk8upgLL22YZtq97JzpK5H"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/extensions/draft-IERC20Permit.sol": {
			"keccak256": "0xca8a1e219f7a427d02b93efd7a4f9ecd76a2e6776b5e196df0a5e4ccc175187b",
			"license": "MIT",
			"urls": [
				"bzz-raw://53eb5ae6a9225130a6b4efc4cad8cc9fff2992e3a95bc1ed518dcb9db965e969",
				"dweb:/ipfs/QmSkLFh7WUYVr8VLkth7RaRQ5siQSw6P45Dc3KT2hFhNnX"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0xd1668d9229b21a4630535ca2100c61e4a2905ea7e4e6077c27dfd1caa7d467ef",
			"license": "MIT",
			"urls": [
				"bzz-raw://b6558c79b0459e0d8f98954af7f1fadf1c5c7809a873742e05ea3f88a5edcc20",
				"dweb:/ipfs/QmaY29cBPKADz8PqyR2M72QLqUgY7o3EYCwQknzpj9u6Da"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/Address.sol": {
			"keccak256": "0xf77cae3ecd8776056d3d2ceb7b6958d757c6a9825b58665f82d38dbec2f695e5",
			"license": "MIT",
			"urls": [
				"bzz-raw://489b9773cb0ef1d391727d0fea532c94228d0a55051d212c434df404a26a849b",
				"dweb:/ipfs/QmQnapN26it7QbPUrjwbMEeEP8QBtppZwfMkjbHBesKAbF"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/structs/EnumerableMap.sol": {
			"keccak256": "0x68fb09424d69c771ebaeb5a425bcbdbb0725a236c0d83d517992b6f44bd7198d",
			"license": "MIT",
			"urls": [
				"bzz-raw://c3a036ba98e5d58911511b85abd620e1d8de7d203ab2a48b2a3d827710847df4",
				"dweb:/ipfs/QmNWrWgkfsk1AoLpWKDkbHu5CZmzEcGzrT74Ug46phm4p5"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/structs/EnumerableSet.sol": {
			"keccak256": "0xa7a4cdd312769aad895841037e16a97caccb0eb0125b4543bec4d2f5f23ade25",
			"license": "MIT",
			"urls": [
				"bzz-raw://072861cb9eedb2eb05863773c9b7501bd5999a165ffef701244441a793a6a929",
				"dweb:/ipfs/QmVxj7PTnAz6gRa6pB8ozxexhR8F7tMvF5V9mYMa24T7LZ"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0xa36a31b4bb17fad88d023474893b3b895fa421650543b1ce5aefc78efbd43244",
			"license": "MIT",
			"urls": [
				"bzz-raw://0f235b9175d95111f301d729566e214c32559e55a2b0579c947484748e20679d",
				"dweb:/ipfs/QmSsNBuPejy1wNe2u3JSt2p9wFhrjvBjFrnAaNe1nDNkEA"
			]
		},
		"Day3Homework/CrossChainReceiver.sol": {
			"keccak256": "0x0c2f736169ed2943e7ddc26893043058112ea4545491b317609aa091159b7aaa",
			"license": "MIT",
			"urls": [
				"bzz-raw://91bc2d44c4155cbac36d75e5a13da50af3e7bfd2b2753d03d91b66708dcc9e03",
				"dweb:/ipfs/QmdGfZw36qudBfuRm34evbMF9ihAP3kP78L4kbaJ51SYPB"
			]
		}
	},
	"version": 1
}